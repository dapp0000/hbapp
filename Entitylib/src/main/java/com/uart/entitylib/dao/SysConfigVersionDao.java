package com.uart.entitylib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uart.entitylib.entity.SysConfigVersion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_CONFIG_VERSION".
*/
public class SysConfigVersionDao extends AbstractDao<SysConfigVersion, Long> {

    public static final String TABLENAME = "SYS_CONFIG_VERSION";

    /**
     * Properties of entity SysConfigVersion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Version = new Property(1, int.class, "version", false, "VERSION");
        public final static Property PreviousVersion = new Property(2, int.class, "previousVersion", false, "PREVIOUS_VERSION");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Creator = new Property(5, String.class, "creator", false, "CREATOR");
    }


    public SysConfigVersionDao(DaoConfig config) {
        super(config);
    }
    
    public SysConfigVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_CONFIG_VERSION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VERSION\" INTEGER NOT NULL ," + // 1: version
                "\"PREVIOUS_VERSION\" INTEGER NOT NULL ," + // 2: previousVersion
                "\"REMARK\" TEXT," + // 3: remark
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 4: createTime
                "\"CREATOR\" TEXT);"); // 5: creator
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_CONFIG_VERSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysConfigVersion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVersion());
        stmt.bindLong(3, entity.getPreviousVersion());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
        stmt.bindLong(5, entity.getCreateTime());
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(6, creator);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysConfigVersion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getVersion());
        stmt.bindLong(3, entity.getPreviousVersion());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
        stmt.bindLong(5, entity.getCreateTime());
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(6, creator);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SysConfigVersion readEntity(Cursor cursor, int offset) {
        SysConfigVersion entity = new SysConfigVersion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // version
            cursor.getInt(offset + 2), // previousVersion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.getLong(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // creator
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysConfigVersion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVersion(cursor.getInt(offset + 1));
        entity.setPreviousVersion(cursor.getInt(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
        entity.setCreator(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SysConfigVersion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SysConfigVersion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysConfigVersion entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
