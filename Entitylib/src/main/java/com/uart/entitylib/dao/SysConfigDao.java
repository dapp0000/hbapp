package com.uart.entitylib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uart.entitylib.entity.SysConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYS_CONFIG".
*/
public class SysConfigDao extends AbstractDao<SysConfig, Long> {

    public static final String TABLENAME = "SYS_CONFIG";

    /**
     * Properties of entity SysConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConfigKey = new Property(1, String.class, "configKey", false, "CONFIG_KEY");
        public final static Property ConfigValue = new Property(2, String.class, "configValue", false, "CONFIG_VALUE");
        public final static Property Version = new Property(3, Integer.class, "version", false, "VERSION");
        public final static Property CreateTime = new Property(4, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Creator = new Property(5, String.class, "creator", false, "CREATOR");
        public final static Property EditTime = new Property(6, Long.class, "editTime", false, "EDIT_TIME");
        public final static Property Editor = new Property(7, String.class, "editor", false, "EDITOR");
    }


    public SysConfigDao(DaoConfig config) {
        super(config);
    }
    
    public SysConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYS_CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONFIG_KEY\" TEXT," + // 1: configKey
                "\"CONFIG_VALUE\" TEXT," + // 2: configValue
                "\"VERSION\" INTEGER," + // 3: version
                "\"CREATE_TIME\" INTEGER," + // 4: createTime
                "\"CREATOR\" TEXT," + // 5: creator
                "\"EDIT_TIME\" INTEGER," + // 6: editTime
                "\"EDITOR\" TEXT);"); // 7: editor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYS_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SysConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String configKey = entity.getConfigKey();
        if (configKey != null) {
            stmt.bindString(2, configKey);
        }
 
        String configValue = entity.getConfigValue();
        if (configValue != null) {
            stmt.bindString(3, configValue);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(4, version);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(6, creator);
        }
 
        Long editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(7, editTime);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(8, editor);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SysConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String configKey = entity.getConfigKey();
        if (configKey != null) {
            stmt.bindString(2, configKey);
        }
 
        String configValue = entity.getConfigValue();
        if (configValue != null) {
            stmt.bindString(3, configValue);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(4, version);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(6, creator);
        }
 
        Long editTime = entity.getEditTime();
        if (editTime != null) {
            stmt.bindLong(7, editTime);
        }
 
        String editor = entity.getEditor();
        if (editor != null) {
            stmt.bindString(8, editor);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SysConfig readEntity(Cursor cursor, int offset) {
        SysConfig entity = new SysConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // configKey
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // configValue
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // version
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // creator
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // editTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // editor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SysConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConfigKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setConfigValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreator(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEditTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setEditor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SysConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SysConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SysConfig entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
