package com.uart.entitylib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uart.entitylib.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserCode = new Property(1, String.class, "userCode", false, "USER_CODE");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Token = new Property(5, String.class, "token", false, "TOKEN");
        public final static Property Sex = new Property(6, Integer.class, "sex", false, "SEX");
        public final static Property Height = new Property(7, Integer.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(8, Integer.class, "weight", false, "WEIGHT");
        public final static Property Birthday = new Property(9, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sign = new Property(10, Integer.class, "sign", false, "SIGN");
        public final static Property Activated = new Property(11, Boolean.class, "activated", false, "ACTIVATED");
        public final static Property Lastlogin = new Property(12, Long.class, "lastlogin", false, "LASTLOGIN");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_CODE\" TEXT," + // 1: userCode
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"MOBILE\" TEXT," + // 3: mobile
                "\"PASSWORD\" TEXT," + // 4: password
                "\"TOKEN\" TEXT," + // 5: token
                "\"SEX\" INTEGER," + // 6: sex
                "\"HEIGHT\" INTEGER," + // 7: height
                "\"WEIGHT\" INTEGER," + // 8: weight
                "\"BIRTHDAY\" TEXT," + // 9: birthday
                "\"SIGN\" INTEGER," + // 10: sign
                "\"ACTIVATED\" INTEGER," + // 11: activated
                "\"LASTLOGIN\" INTEGER);"); // 12: lastlogin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(7, sex);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(8, height);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(9, weight);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        Integer sign = entity.getSign();
        if (sign != null) {
            stmt.bindLong(11, sign);
        }
 
        Boolean activated = entity.getActivated();
        if (activated != null) {
            stmt.bindLong(12, activated ? 1L: 0L);
        }
 
        Long lastlogin = entity.getLastlogin();
        if (lastlogin != null) {
            stmt.bindLong(13, lastlogin);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(2, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        Integer sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(7, sex);
        }
 
        Integer height = entity.getHeight();
        if (height != null) {
            stmt.bindLong(8, height);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(9, weight);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        Integer sign = entity.getSign();
        if (sign != null) {
            stmt.bindLong(11, sign);
        }
 
        Boolean activated = entity.getActivated();
        if (activated != null) {
            stmt.bindLong(12, activated ? 1L: 0L);
        }
 
        Long lastlogin = entity.getLastlogin();
        if (lastlogin != null) {
            stmt.bindLong(13, lastlogin);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // token
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // height
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // weight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // sign
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // activated
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // lastlogin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHeight(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setWeight(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSign(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setActivated(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setLastlogin(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
