package com.uart.entitylib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.uart.entitylib.entity.UsageRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USAGE_RECORD".
*/
public class UsageRecordDao extends AbstractDao<UsageRecord, Long> {

    public static final String TABLENAME = "USAGE_RECORD";

    /**
     * Properties of entity UsageRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property UserCode = new Property(2, String.class, "userCode", false, "USER_CODE");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property DeviceSN = new Property(4, String.class, "deviceSN", false, "DEVICE_SN");
        public final static Property DeviceMac = new Property(5, String.class, "deviceMac", false, "DEVICE_MAC");
        public final static Property DeviceName = new Property(6, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property DeviceSignal = new Property(7, Integer.class, "deviceSignal", false, "DEVICE_SIGNAL");
        public final static Property DeviceBattery = new Property(8, Integer.class, "deviceBattery", false, "DEVICE_BATTERY");
        public final static Property MusicId = new Property(9, Long.class, "musicId", false, "MUSIC_ID");
        public final static Property SpeakId = new Property(10, Long.class, "speakId", false, "SPEAK_ID");
        public final static Property RestDurationId = new Property(11, Long.class, "restDurationId", false, "REST_DURATION_ID");
        public final static Property StartTime = new Property(12, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(13, Long.class, "endTime", false, "END_TIME");
        public final static Property Vigor = new Property(14, Integer.class, "vigor", false, "VIGOR");
        public final static Property OriginalDataFile = new Property(15, String.class, "originalDataFile", false, "ORIGINAL_DATA_FILE");
        public final static Property SynchState = new Property(16, Integer.class, "synchState", false, "SYNCH_STATE");
    }


    public UsageRecordDao(DaoConfig config) {
        super(config);
    }
    
    public UsageRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USAGE_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_CODE\" TEXT," + // 2: userCode
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"DEVICE_SN\" TEXT," + // 4: deviceSN
                "\"DEVICE_MAC\" TEXT," + // 5: deviceMac
                "\"DEVICE_NAME\" TEXT," + // 6: deviceName
                "\"DEVICE_SIGNAL\" INTEGER," + // 7: deviceSignal
                "\"DEVICE_BATTERY\" INTEGER," + // 8: deviceBattery
                "\"MUSIC_ID\" INTEGER," + // 9: musicId
                "\"SPEAK_ID\" INTEGER," + // 10: speakId
                "\"REST_DURATION_ID\" INTEGER," + // 11: restDurationId
                "\"START_TIME\" INTEGER," + // 12: startTime
                "\"END_TIME\" INTEGER," + // 13: endTime
                "\"VIGOR\" INTEGER," + // 14: vigor
                "\"ORIGINAL_DATA_FILE\" TEXT," + // 15: originalDataFile
                "\"SYNCH_STATE\" INTEGER);"); // 16: synchState
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USAGE_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UsageRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(3, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(5, deviceSN);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(6, deviceMac);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
 
        Integer deviceSignal = entity.getDeviceSignal();
        if (deviceSignal != null) {
            stmt.bindLong(8, deviceSignal);
        }
 
        Integer deviceBattery = entity.getDeviceBattery();
        if (deviceBattery != null) {
            stmt.bindLong(9, deviceBattery);
        }
 
        Long musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindLong(10, musicId);
        }
 
        Long speakId = entity.getSpeakId();
        if (speakId != null) {
            stmt.bindLong(11, speakId);
        }
 
        Long restDurationId = entity.getRestDurationId();
        if (restDurationId != null) {
            stmt.bindLong(12, restDurationId);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(13, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(14, endTime);
        }
 
        Integer vigor = entity.getVigor();
        if (vigor != null) {
            stmt.bindLong(15, vigor);
        }
 
        String originalDataFile = entity.getOriginalDataFile();
        if (originalDataFile != null) {
            stmt.bindString(16, originalDataFile);
        }
 
        Integer synchState = entity.getSynchState();
        if (synchState != null) {
            stmt.bindLong(17, synchState);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UsageRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(3, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(5, deviceSN);
        }
 
        String deviceMac = entity.getDeviceMac();
        if (deviceMac != null) {
            stmt.bindString(6, deviceMac);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
 
        Integer deviceSignal = entity.getDeviceSignal();
        if (deviceSignal != null) {
            stmt.bindLong(8, deviceSignal);
        }
 
        Integer deviceBattery = entity.getDeviceBattery();
        if (deviceBattery != null) {
            stmt.bindLong(9, deviceBattery);
        }
 
        Long musicId = entity.getMusicId();
        if (musicId != null) {
            stmt.bindLong(10, musicId);
        }
 
        Long speakId = entity.getSpeakId();
        if (speakId != null) {
            stmt.bindLong(11, speakId);
        }
 
        Long restDurationId = entity.getRestDurationId();
        if (restDurationId != null) {
            stmt.bindLong(12, restDurationId);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(13, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(14, endTime);
        }
 
        Integer vigor = entity.getVigor();
        if (vigor != null) {
            stmt.bindLong(15, vigor);
        }
 
        String originalDataFile = entity.getOriginalDataFile();
        if (originalDataFile != null) {
            stmt.bindString(16, originalDataFile);
        }
 
        Integer synchState = entity.getSynchState();
        if (synchState != null) {
            stmt.bindLong(17, synchState);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UsageRecord readEntity(Cursor cursor, int offset) {
        UsageRecord entity = new UsageRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceSN
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceMac
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // deviceSignal
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // deviceBattery
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // musicId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // speakId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // restDurationId
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // startTime
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // endTime
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // vigor
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // originalDataFile
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // synchState
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UsageRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceSN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceMac(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceSignal(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDeviceBattery(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMusicId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setSpeakId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setRestDurationId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setStartTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setEndTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setVigor(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setOriginalDataFile(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSynchState(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UsageRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UsageRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UsageRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
